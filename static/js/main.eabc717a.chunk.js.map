{"version":3,"sources":["Season.js","Loader.js","Error.js","App.js","index.js"],"names":["seasonOption","winter","text","icon","summer","Season","props","lat","month","season","Date","getMonth","className","Loader","defaultProps","Error","App","state","err","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","message","this","Component","ReactDOM","render","document","querySelector"],"mappings":"mNAEMA,G,MAAe,CACnBC,OAAQ,CAAEC,KAAM,yCAA0CC,KAAM,aAChEC,OAAQ,CAAEF,KAAM,sCAAuCC,KAAM,SAuBhDE,EAXA,SAACC,GACd,IAVqBC,EAAKC,EAUtBC,GAViBF,EAUMD,EAAMC,KAVPC,GAUY,IAAIE,MAAOC,YATrC,GAAKH,EAAQ,EAEhBD,EAAM,EAAI,SAAW,SAGvBA,EAAM,EAAI,SAAW,UAK5B,OACE,yBAAKK,UAAS,iBAAYH,IACxB,uBAAGG,UAAS,eAAUZ,EAAaS,GAAQN,KAA/B,wBACZ,4BAAKH,EAAaS,GAAQP,MAC1B,uBAAGU,UAAS,eAAUZ,EAAaS,GAAQN,KAA/B,2BCpBZU,EAAS,SAACP,GAAD,OACb,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,gCAAgCN,EAAMJ,QAIzDW,EAAOC,aAAe,CACpBZ,KAAM,WAGOW,QCVTE,EAAQ,SAACT,GAAD,OACZ,yBAAKM,UAAS,gBACZ,uBAAGA,UAAS,gCACZ,4BAAKN,EAAMJ,MACX,uBAAGU,UAAS,mCAIhBG,EAAMD,aAAe,CACnBZ,KAAM,4CAGOa,QCeAC,E,4MAtBbC,MAAQ,CACNV,IAAK,KACLW,IAAK,I,kEAGc,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACnD,SAACR,GAAD,OAAS,EAAKM,SAAS,CAAEN,IAAKA,EAAIS,e,+BAKpC,OAAKC,KAAKX,MAAMC,KAAOU,KAAKX,MAAMV,IACzB,kBAAC,EAAD,CAAQA,IAAKqB,KAAKX,MAAMV,OACrBqB,KAAKX,MAAMV,KAAOqB,KAAKX,MAAMC,IAChC,kBAAC,EAAD,MAEF,kBAAC,EAAD,CAAQhB,KAAK,8C,GAnBN2B,aCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.eabc717a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst seasonOption = {\n  winter: { text: \"Pull over your blanket! It's freezing.\", icon: \"snowflake\" },\n  summer: { text: \"Let's dive in a pool. It's too hot.\", icon: \"sun\" },\n};\n\nconst getSeasonInfo = (lat, month) => {\n  if (month > 2 && month < 0) {\n    // For Northern Hemisphere, it's summer.\n    return lat > 0 ? \"summer\" : \"winter\";\n    // For Southern Hemisphere, it's winter.\n  }\n  return lat < 0 ? \"winter\" : \"summer\";\n};\n\nconst Season = (props) => {\n  let season = getSeasonInfo(props.lat, new Date().getMonth());\n  return (\n    <div className={`season ${season}`}>\n      <i className={`icon ${seasonOption[season].icon} massive left-icon`} />\n      <h1>{seasonOption[season].text}</h1>\n      <i className={`icon ${seasonOption[season].icon} massive right-icon`} />\n    </div>\n  );\n};\n\nexport default Season;\n\n// Northern Hemisphere 0 or greater\n// Southern Hemisphere 0 or lesser\n","import React from \"react\";\n\nconst Loader = (props) => (\n  <div className=\"ui active dimmer\">\n    <div className=\"ui indeterminate text loader\">{props.text}</div>\n  </div>\n);\n\nLoader.defaultProps = {\n  text: \"Loading\",\n};\n\nexport default Loader;\n","import React from \"react\";\n\nconst Error = (props) => (\n  <div className={`error season`}>\n    <i className={`icon undo massive left-icon`} />\n    <h1>{props.text}</h1>\n    <i className={`icon undo massive right-icon`} />\n  </div>\n);\n\nError.defaultProps = {\n  text: \"User did not accept the location prompt.\",\n};\n\nexport default Error;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Season from \"./Season\";\nimport Loader from \"./Loader\";\nimport Error from \"./Error\";\n\nclass App extends Component {\n  state = {\n    lat: null,\n    err: \"\",\n  };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => this.setState({ lat: position.coords.latitude }),\n      (err) => this.setState({ err: err.message })\n    );\n  }\n\n  render() {\n    if (!this.state.err && this.state.lat) {\n      return <Season lat={this.state.lat} />;\n    } else if (!this.state.lat && this.state.err) {\n      return <Error />;\n    }\n    return <Loader text=\"Accept Location Prompt and Continue..\" />;\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}